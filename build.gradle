import java.nio.charset.StandardCharsets

plugins {
    id 'fabric-loom' version '1.2-SNAPSHOT'
    id 'maven-publish'
    id 'org.jetbrains.kotlin.jvm' version "1.8.20"
}

import java.nio.charset.StandardCharsets


class SourceGeneration {
    SourceGeneration(String name) {
        this.name = name
    }


    final String name
    String pack = "org.redsxi.mc.ctplus.generated"

    Map<String, String> STRING_VALUES = new HashMap<>()
    Map<String, Integer> INT_VALUES = new HashMap<>()
    Map<String, Long> LONG_VALUES = new HashMap<>()
    Map<String, Short> SHORT_VALUES = new HashMap<>()
    Map<String, Boolean> BOOLEAN_VALUES = new HashMap<>()

    String getFileData() {
        StringBuilder stringBuilder = new StringBuilder()
        stringBuilder.append("package ${pack};\n\n/**\n\tAuto-generated file by AutoSourceGen. \n\tDO NOT EDIT.\n*/\npublic final class ${name} {\n")
        STRING_VALUES.forEach {key, value ->
            stringBuilder.append("\tpublic static final String ${key} = \"${value}\";\n")
        }
        INT_VALUES.forEach {key, value ->
            stringBuilder.append("\tpublic static final int ${key} = ${value};\n")
        }
        LONG_VALUES.forEach {key, value ->
            stringBuilder.append("\tpublic static final long ${key} = ${value}L;\n")
        }
        SHORT_VALUES.forEach {key, value ->
            stringBuilder.append("\tpublic static final short ${key} = ${value};\n")
        }
        BOOLEAN_VALUES.forEach {key, value ->
            stringBuilder.append("\tpublic static final boolean ${key} = ${value};\n")
        }
        stringBuilder.append("}")
        return stringBuilder.toString()
    }

    void stringProperty(String key, String value) {
        STRING_VALUES.put(key, value)
    }

    void integerProperty(String key, int value) {
        INT_VALUES.put(key, value)
    }

    void shortProperty(String key, short value) {
        SHORT_VALUES.put(key, value)
    }

    void longProperty(String key, long value) {
        LONG_VALUES.put(key, value)
    }

    void booleanProperty(String key, boolean value) {
        BOOLEAN_VALUES.put(key, value)
    }

    void pack(String pack) {
        this.pack = pack
    }
}

sourceSets {
    main {
        java {
            srcDirs "generated/sources"
        }
    }
}

class GenerationList {
    public static final GenerationList INSTANCE = new GenerationList()
    private List<SourceGeneration> list = new ArrayList<>()

    void append(SourceGeneration gen) {
        list.add(gen)
    }

    List<SourceGeneration> get() {
        return list
    }
}

static void generateFile(String name, Action<SourceGeneration> action) {
    SourceGeneration generation = new SourceGeneration(name)
    action.execute(generation)
    GenerationList.INSTANCE.append(generation)
}


group = project.maven_group

repositories {
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.

    maven {
        name = "Modrinth"
        url = "https://api.modrinth.com/maven"
    }
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings loom.officialMojangMappings()
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    // Kotlin
    modImplementation "net.fabricmc:fabric-language-kotlin:1.10.17+kotlin.1.9.22"

    // Mods
    modImplementation "maven.modrinth:XKPAmI6u:UT2U5yfn"
}

var isDebug = false

var buildTime = System.currentTimeMillis()

version = isDebug ? "${project.mod_version}+DEBUGBUILD.${buildTime}" : project.mod_version.toString()

generateFile("BuildProps") {
    it.stringProperty("VERSION", project.version.toString())
    it.longProperty("BUILD_TIME", buildTime)
}

generateFile("RuntimeVariables") {
    it.booleanProperty("DEBUG", isDebug)
}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "loader_version", project.loader_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": project.minecraft_version,
                "loader_version": project.loader_version
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}"}
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}

loom {
    accessWidenerPath = file("src/main/resources/ctplus.accesswidener")
}

remapJar {
    archiveFileName = "crabmtr-railway-plus_${project.minecraft_version}_${project.version}.jar"
}



// do not edit

var genSrcDir = new File("${projectDir.absolutePath}/generated/sources/org/redsxi/mc/ctplus/generated")
genSrcDir.mkdirs()
GenerationList.INSTANCE.get().forEach {
    var verConfigFile = new File(genSrcDir.absolutePath + "/${it.name}.java")
    if (verConfigFile.exists() || verConfigFile.isDirectory()) verConfigFile.delete()
    verConfigFile.createNewFile()
    var verConfigWriter = new FileOutputStream(verConfigFile)
    verConfigWriter.write(it.getFileData().getBytes(StandardCharsets.UTF_8))
    verConfigWriter.close()
}